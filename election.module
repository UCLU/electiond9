<?php

/**
 * @file
 * Contains election.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\election\Entity\ElectionPostType;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/** @file modules/custom/artwork_provider/artwork_provider.module
 *
 * Provides a theme definition for custom content entity
 * {@inheritdoc}
 */
function election_theme($existing, $type, $theme, $path) {
  $theme = [
    'election' => [
      'render element' => 'elements',
      'file' => 'election.page.inc',
    ],
    'election_post' => [
      'render element' => 'elements',
      'file' => 'election_post.page.inc',
    ],
    'election_ballot' => [
      'render element' => 'elements',
      'file' => 'election_ballot.page.inc',
    ],
    'election_candidate' => [
      'render element' => 'elements',
      'file' => 'election_candidate.page.inc',
    ],
    'election_status_summary' => [
      'variables' => [
        'phases' => []
      ],
    ],
    'election_actions' => [
      'variables' => [
        'actions' => []
      ],
    ],
    'election_post_actions' => [
      'variables' => [
        'actions' => []
      ],
    ],
  ];
  return $theme;
}

/**
 * Implements hook_help().
 */
function election_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
      // Main module help for the election module.
    case 'help.page.election':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Run democratic elections through nomination, voting and results counting.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Helper function to extract the entity for the supplied route.
 *
 * @return null|ContentEntityInterface
 */
function election_get_route_entity() {
  $route_match = \Drupal::routeMatch();
  // Entity will be found in the route parameters.
  if (($route = $route_match->getRouteObject()) && ($parameters = $route->getOption('parameters'))) {
    // Determine if the current route represents an entity.
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && strpos($options['type'], 'entity:') === 0) {
        $entity = $route_match->getParameter($name);
        if ($entity instanceof ContentEntityInterface && $entity->hasLinkTemplate('canonical')) {
          return $entity;
        }

        // Since entity was found, no need to iterate further.
        return NULL;
      }
    }
  }
}

function election_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // @todo allow user to order the positions list based on eligibility
  // @todo allow user to order the positions list based on category order

  return;

  // $positionView = $view->id() == 'election_posts_for_election_page' && $view->getDisplay()->display['id'] == 'embed';
  // if ($positionView) {
  //   $orderby = "
  //   CASE
  //     WHEN node.type = 'page' THEN 1
  //     WHEN node.type = 'article' THEN 2
  //   END ASC
  // ";
  //   $query->orderby = array($orderby);
  // }
}

function election_form_alter($form) {
}

/**
 * Implements hook_entity_extra_field_info().
 */
function election_entity_extra_field_info() {
  $extra = array();

  foreach (ElectionPostType::loadMultiple() as $bundle) {
    $extra['election_post'][$bundle->id()]['display']['field_post_actions'] = array(
      'label' => t('Action links for post'),
      'description' => t('e.g. Vote, Nominate, check eligibility, depending on user, phases open, and eligibility'),
      'weight' => -1,
      'visible' => TRUE,
    );
    $extra['election_post'][$bundle->id()]['display']['field_status_summary'] = array(
      'label' => t('Status and eligibility summary'),
      'description' => t('Shows the open/close status for each phase, and the current user\'s eligibility.'),
      'weight' => 0,
      'visible' => TRUE,
    );
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function election_election_post_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('field_status_summary')) {
    election_election_post_view_field_status_summary($build, $entity, $display, $view_mode);
  }
  if ($display->getComponent('field_post_actions')) {
    election_election_post_view_field_post_actions($build, $entity, $display, $view_mode);
  }
}

function election_election_post_view_field_status_summary(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $summary = [
    '#theme' => 'election_status_summary',
    '#phases' => $entity->getUserEligibilityInformation(\Drupal::currentUser(), $entity->getEnabledPhases()),
  ];

  $build['field_status_summary'] = [
    '#type' => 'markup',
    '#markup' => render($summary),
    '#cache' => [
      'max-age' => 0,
    ],
  ];
}

function election_election_post_view_field_post_actions(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $summary = [
    '#theme' => 'election_post_actions',
    '#actions' => $entity->getActionLinks(\Drupal::currentUser()),
  ];

  $build['field_post_actions'] = [
    '#type' => 'markup',
    '#markup' => render($summary),
    '#cache' => [
      'max-age' => 0,
    ],
  ];
}
